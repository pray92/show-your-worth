name: CI/CD

on:
  push:
    branches:
      - develop
      - master

jobs:
  Test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Test
        run: ./gradlew test

      - name: Send slack if failed
        if: ${{ failure() }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest     # selectable (default: repo,message)
        env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Build
        run: ./gradlew build -x test -Pprofile=prod

      - name: Send slack if failed
        if: ${{ failure() }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  Deployment:
    runs-on: ubuntu-latest
    needs:
      - Test
      - Build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Boot Jar File
        run: ./gradlew bootJar -Pprofile=prod

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.CLOUD_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CLOUD_SECRET_KEY }}
          aws-region: ${{ secrets.STORAGE_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Build Image and Push Image to Amazon ECR
        env:
          CONTAINER_REGISTRY: ${{ secrets.AMAZON_ECR }}
          REGISTRY_REPOSITORY: ${{ secrets.AMAZON_ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $CONTAINER_REGISTRY/$REGISTRY_REPOSITORY:$IMAGE_TAG .
          docker push $CONTAINER_REGISTRY/$REGISTRY_REPOSITORY:$IMAGE_TAG

      - name: Send slack if failed
        if: ${{ failure() }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  Complete:
    runs-on: ubuntu-latest
    needs:
      - Deployment
    steps:
      - name: Run
        run: echo "complete"

      - name: Send slack
        if: ${{ always() }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
